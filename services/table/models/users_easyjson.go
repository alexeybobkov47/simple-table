// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	time "time"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson84c0690eDecodeInitModels(in *jlexer.Lexer, out *Users) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Users, 0, 0)
			} else {
				*out = Users{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 User
			easyjson84c0690eDecodeInitModels1(in, &v1)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeInitModels(out *jwriter.Writer, in Users) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			easyjson84c0690eEncodeInitModels1(out, v3)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Users) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeInitModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Users) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeInitModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Users) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeInitModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Users) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeInitModels(l, v)
}
func easyjson84c0690eDecodeInitModels1(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.ID = int64(in.Int64())
		case "username":
			out.Name = string(in.String())
		case "pc_name":
			out.PcName = string(in.String())
		case "user_group":
			out.Group = string(in.String())
		case "phone_number":
			out.PhoneNumber = string(in.String())
		case "cabinet":
			out.Cabinet = string(in.String())
		case "discription":
			if in.IsNull() {
				in.Skip()
				out.Discription = nil
			} else {
				if out.Discription == nil {
					out.Discription = new(string)
				}
				*out.Discription = string(in.String())
			}
		case "birthdate":
			if in.IsNull() {
				in.Skip()
				out.BirthDate = nil
			} else {
				if out.BirthDate == nil {
					out.BirthDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.BirthDate).UnmarshalJSON(data))
				}
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "modified_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ModifiedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeInitModels1(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.PcName != "" {
		const prefix string = ",\"pc_name\":"
		out.RawString(prefix)
		out.String(string(in.PcName))
	}
	if in.Group != "" {
		const prefix string = ",\"user_group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"phone_number\":"
		out.RawString(prefix)
		out.String(string(in.PhoneNumber))
	}
	if in.Cabinet != "" {
		const prefix string = ",\"cabinet\":"
		out.RawString(prefix)
		out.String(string(in.Cabinet))
	}
	{
		const prefix string = ",\"discription\":"
		out.RawString(prefix)
		if in.Discription == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Discription))
		}
	}
	{
		const prefix string = ",\"birthdate\":"
		out.RawString(prefix)
		if in.BirthDate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.BirthDate).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"modified_at\":"
		out.RawString(prefix)
		out.Raw((in.ModifiedAt).MarshalJSON())
	}
	out.RawByte('}')
}
